#BlueJ class context
comment0.target=StorageLocation
comment0.text=\r\n\ StorageLocation\ Object\r\n\ \r\n\ @author\ Ajar\ Duishembieva\r\n
comment1.params=locationID
comment1.target=StorageLocation(java.lang.String)
comment1.text=\r\n\ Constructor\ for\ StorageLocation\ Object\r\n\ \r\n\ @param\ locationID\ \ \ \ \ \ \ \ \ \ \ A\ Storage\ Location's\ ID;\ Must\ be\ a\ specific\ pattern\r\n
comment10.params=
comment10.target=StorageUnit[][]\ getLayout()
comment10.text=\r\n\ Gets\ all\ the\ StorageUnits\ the\ Storage\ Location\ has.\r\n\ \r\n\ @return\ \ \ \ \ \ storage\ units\ at\ this\ location\r\n
comment11.params=customer\ type
comment11.target=StorageUnit[]\ getUnitsFor(Customer,\ StorageUnit.UnitType)
comment11.text=\r\n\ Method\ that\ gets\ all\ the\ units\ for\ specified\ customers\ or\ types.\r\n\ If\ null\ is\ entered\ for\ customer\ then\ retrieves\ all\ empty\ units\r\n\ If\ null\ is\ entered\ for\ Unit\ Type\ then\ retrieves\ all\ unit\ types\r\n\ \r\n\ @param\ customer\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ customer\ associated\ with\ unit\r\n\ @param\ type\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ type\ of\ storage\ unit\ specified\r\n\ @return\ an\ array\ of\ StorageUnits\ \ \ \ \ \ \ \ \ \ \ \ \ array\ of\ specified\ StorageUnits\r\n
comment12.params=
comment12.target=StorageUnit[]\ findEmptyStorageUnits()
comment12.text=\r\n\ Method\ that\ retrieves\ an\ array\ of\ empty\ storage\ units\r\n\ \r\n\ @return\ storageUnit[]\ \ \ \ \ \ \ \ \ \ \ \ an\ array\ of\ empty\ storage\ units\r\n
comment13.params=type
comment13.target=StorageUnit[]\ findEmptyStorageUnitsByType(StorageUnit.UnitType)
comment13.text=\r\n\ Method\ that\ retrieves\ an\ array\ of\ empty\ storage\ units\ by\ type\r\n\ \r\n\ @param\ type\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ a\ specified\ unit\ type\r\n\ @return\ storageUnit[]\ \ \ \ \ \ \ \ \ \ \ \ an\ array\ of\ specified\ empty\ storage\ units\r\n
comment14.params=
comment14.target=void\ chargeMonthlyRent()
comment14.text=\r\n\ Method\ that\ uses\ a\ loop\ and\ utilizes\ addCharges()\ method\ to\ charge\ all\ customers\ at\ a\ location\r\n
comment15.params=customer
comment15.target=int\ getNumberOfUnitsFor(Customer)
comment15.text=\r\n\ Method\ that\ retrieves\ the\ number\ of\ units\ for\ a\ specified\ customer;\ including\ nulls\r\n\ \r\n\ @param\ customer\ \ \ \ \ \ \ \ \ \ \ \ \ \ customer\ associated\ with\ unit\r\n\ @return\ count\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ number\ of\ units\ for\ a\ specified\ customer\r\n
comment16.params=
comment16.target=int\ getTotalUnits()
comment16.text=\ \r\n\ Method\ that\ return\ total\ Units\ at\ a\ location\r\n\ \r\n\ @return\ total\ units\ \ \ \ \ \ \ \ \ \ total\ units\ at\ a\ location\r\n
comment17.params=
comment17.target=java.lang.String\ toString()
comment17.text=\r\n\ String\ representation\ of\ Storage\ Location\r\n\ \r\n\ @return\ String\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ String\ Representation\r\n
comment2.params=locationID
comment2.target=boolean\ isValidID(java.lang.String)
comment2.text=\r\n\ Precondition\ test\ to\ determine\ if\ locationID\ is\ valid\r\n\ Uses\ regular\ expressions\ to\ ensure\ location\ ID\ matches\ a\ specific\ pattern\r\n\ \r\n\ @param\ \ locationID\ \ \ \ \ \ \ \ \ \ \ \ A\ Storage\ Location's\ ID\r\n\ @return\ locationID\ \ \ \ \ \ \ \ \ \ \ \ A\ Storage\ Location's\ ID\r\n
comment3.params=locationID
comment3.target=void\ setLocationID(java.lang.String)
comment3.text=\r\n\ Mutator\ method\ that\ sets\ the\ location\ ID\r\n\ Throws\ if\ the\ locationID\ does\ not\ satisfy\ the\ precondition\ \r\n\ \r\n\ @param\ locationID\ \ \ \ \ \ \ \ \ \ \ \ A\ Storage\ Location's\ ID\r\n
comment4.params=
comment4.target=java.lang.String\ getLocationID()
comment4.text=\r\n\ Accessor\ method\ that\ gets\ the\ location\ ID\r\n\ \r\n\ @return\ locationID\ \ \ \ \ \ \ The\ Location\ ID\r\n
comment5.params=row\ col
comment5.target=StorageUnit\ getUnitbyIndex(int,\ int)
comment5.text=\ \r\n\ Gets\ the\ storage\ unit\ at\ the\ provided\ indexes\r\n\ \r\n\ @param\ row\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Index\ for\ row\r\n\ @param\ col\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Index\ for\ col\r\n\ @return\ StorageUnit\ \ \ \ \ \ \ The\ StorageUnit\ at\ the\ privded\ indexes\r\n
comment6.params=customer
comment6.target=void\ addCustomer(Customer)
comment6.text=\r\n\ Method\ that\ adds\ a\ customer\ to\ the\ CustomerList\ for\ a\ location.\ For\ every\ 100\ customers\r\n\ we\ will\ make\ a\ new\ larger\ array\ that\ can\ contain\ an\ additional\ 100\ customers.\r\n\ \r\n\ @param\ customer\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ customer\ objects\r\n
comment7.params=pos
comment7.target=Customer\ getCustomerByIndex(int)
comment7.text=\r\n\ Gets\ a\ Customer\ at\ the\ provided\ index\r\n\ \r\n\ @param\ pos\ \ \ \ \ \ \ \ \ \ \ The\ index\ position\r\n\ @return\ Customer\ \ \ \ \ The\ Customer\ at\ the\ index\ position\r\n
comment8.params=
comment8.target=int\ getCustomerCount()
comment8.text=\r\n\ Gets\ a\ Customer\ count\ for\ a\ Location;\ if\ a\ customer\ references\ null\ then\ it\ will\ not\ be\ counted\r\n\ \r\n\ @return\ count\ \ \ \ \ \ \ \ The\ amount\ of\ customers\ found\r\n
comment9.params=
comment9.target=Customer[]\ getMyCustomers()
comment9.text=\r\n\ Gets\ all\ the\ customers\ that\ the\ Storage\ Location\ has.\ \r\n\ \r\n\ @return\ \ \ \ \ \ customers\ at\ this\ location\r\n
numComments=18
